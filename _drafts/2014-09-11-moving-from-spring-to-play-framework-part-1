---
layout: post
title: Moving from spring to play framework - part 1
date:   2014-09-11
comments: true
---

## No clear choice when it comes to persistence:

## Things break when versions change

While my project was underway, the version 2.3 of play framework was released. It was [said][play-performance] that it had much improved performance; [among other things][play-2.3-release]. So, we decided to go ahead with the new version; and all hell broke loose. Well, not really, but a hell of a lot of things stopped working.

The most annoying one was that the sbt wouldn't wasn't even able to load the project. It threw a long stacktrace that ended with something like "value enablePlugins is not a member of sbt.Project". It told me that the error was in my buil.sbt file, and gave me an exact line number. So, I banged my head against a wall for an hour, trying to find where I had made the mistake. Turned out that the problem was not with the build.sbt file, but rather with my "project/plugins.sbt" file. And here is the kicker: the name of the [ensime][ensime][^1] sbt plugin had been changed from "ensime-sbt" to "ensime-sbt-cmd". _That_ was the reason. Having worked for several years in enterprise development, I was aghast. I mean, that kind of a change was completely unexpected. Incompatibility between versions is sometimes expected, but changing the name of an artifact! Oh, come on! I wouldn't be annoyed so much but for the fact that sbt complained about the wrong file.

I am not a fan of java development, but I do like the [spring framework][spring-framework]. It will be some time before the play framework may equal its maturity. I have been involved in bumping up the version of spring, including spring security, in some  pretty large enterprise projects, without so much as a single test failing.

With play and scala, the version of the play framework is not the only thing that you have to worry about, you also need to worry about the scala versions. 

Another thing that broke was the security layer, implemented using [secure-social][secure-social] module. The artifacts available in the public maven repositories are not compatible with version 2.3 of the play framework. That is another headache with play. The security frameworks are always going to work closely with the web framework, and  if the web framework itself is susceptible to incompatible changes, you can't really expect those security frameworks to work across all versions. I had two choices, either build from the master branch of secure-social (which is being developed for play 2.3), or find something else.

Just at the moment when I was considering building from the source, I saw a [commit message][securesocial-commit-msg] in the repo saying that they had to roll back the play framework version because of an issue. So, even that wasn't really a good solution. Fortunately, the security layer in the project wasn't very complicated it would be easier to build something myself. I had seen the source-code of secure-social, I knew about the [Actions composition][scala-action-composition]. I could easily put something together.



[spring-framework]: http://spring.io/

[secure-social]: http://securesocial.ws/

[securesocial-commit-msg]: https://github.com/jaliss/securesocial/commit/db46f2c3db784f3596ddd407075c222952d08129

[scala-action-composition]: https://www.playframework.com/documentation/2.3.4/ScalaActionsComposition






## Json handling is not quite straigtforward.

[^1]: I have started using [emacs][emacs] for scala development, and so far, I am really [enjoying][emacs-blog-post] it.

[emacs]: http://www.gnu.org/software/emacs/

[emacs-blog-post]: http://bhashitparikh.com/2014/08/11/emacs-the-text-editor-of-the-jedi.html

[play-performance]: https://twitter.com/grantklopper/status/491180635688808448

[play-2.3-release]: https://www.playframework.com/documentation/2.4.x/Highlights23

[ensime]: http://ensime.github.io/ "ensime sbt plugin"

